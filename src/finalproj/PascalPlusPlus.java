/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package finalproj;

import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.image.ImageObserver;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import javax.swing.text.Utilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 *
 */
public class PascalPlusPlus extends javax.swing.JFrame
{
	
	/**
	 * 
	 */
	private static final long serialVersionUID = -2055409937503386343L;
	
	private final BasicClass basicClass;
	private final Module1 module1;
	private final Module2 module2;
	private final Module3 module3;
	private final Optimization optimizationEditor;
	private final DDG ddg;
	private final TextEditor textEditor;
	private final LanguageEditor languageEditor;
	private final HelpForm helpForm;
	private Component frame;
	private String currentFilePath;
	private final String path;
	private int searchIndex;
	
	public PascalPlusPlus()
	{
		this.path = this.GetExecutionPath();
		this.basicClass = new BasicClass(this.path);
		this.module1 = new Module1(this.path);
		this.module2 = new Module2(this.path);
		this.module3 = new Module3(this.path);
		this.optimizationEditor = new Optimization(this.path);
		this.ddg = new DDG(this.path);
		this.helpForm = new HelpForm(this.path);
		this.textEditor = new TextEditor(this.path);
		this.languageEditor = new LanguageEditor(this.path + "\\projects\\Pascal++\\languageFile.txt", this.path);
		// this.languageEditor = new LanguageEditor("c:\\Pascal++\\projects\\Pascal++\\languageFile.txt", this.path);
		this.setTitle("Pascal++ IDE");
		this.currentFilePath = "";
		this.searchIndex = 0;
		this.setSize(Toolkit.getDefaultToolkit().getScreenSize());
		System.out.println(Toolkit.getDefaultToolkit().getScreenSize());
		this.initComponents();
		this.runningDirField.setText(this.path);
		this.currentProjectField.setText(this.path + "\\projects\\Pascal++");
		this.lineField.setText("1");
		this.columnField.setText("1");
		this.CreateTree();
	}
	
	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{
		
		this.jPanel1 = new javax.swing.JPanel();
		this.jScrollPane2 = new javax.swing.JScrollPane();
		this.folderTree = new javax.swing.JTree();
		this.lineLabel = new javax.swing.JLabel();
		this.lineField = new javax.swing.JTextField();
		this.jLabel2 = new javax.swing.JLabel();
		this.columnField = new javax.swing.JTextField();
		this.jScrollPane3 = new javax.swing.JScrollPane();
		StyleContext sc = new StyleContext();
		final DefaultStyledDocument doc = new DefaultStyledDocument(sc);
		this.jTextPane1 = new javax.swing.JTextPane(doc);
		this.StatusField = new javax.swing.JTextField();
		this.currentFileLabel = new javax.swing.JLabel();
		this.currentFileField = new javax.swing.JTextField();
		this.regBracketsLabel = new javax.swing.JLabel();
		this.regBracketsField = new javax.swing.JTextField();
		this.roundBracketsLabel = new javax.swing.JLabel();
		this.roundBracketsField = new javax.swing.JTextField();
		this.squareBracketsLabel = new javax.swing.JLabel();
		this.squareBracketsField = new javax.swing.JTextField();
		this.StatusLabel = new javax.swing.JLabel();
		this.seacrhLabel = new javax.swing.JLabel();
		this.searchField = new javax.swing.JTextField();
		this.searchButton = new javax.swing.JButton();
		this.clearButton = new javax.swing.JButton();
		this.currentProjectLabel = new javax.swing.JLabel();
		this.currentProjectField = new javax.swing.JTextField();
		this.nextButton = new javax.swing.JButton();
		this.runningDirLabel = new javax.swing.JLabel();
		this.runningDirField = new javax.swing.JTextField();
		this.jMenuBar1 = new javax.swing.JMenuBar();
		this.FileMenu = new javax.swing.JMenu();
		this.createNewProject = new javax.swing.JMenuItem();
		this.newFile = new javax.swing.JMenuItem();
		this.openProject = new javax.swing.JMenuItem();
		this.OpenFile = new javax.swing.JMenuItem();
		this.CheckCode = new javax.swing.JMenuItem();
		this.jSeparator2 = new javax.swing.JPopupMenu.Separator();
		this.SaveFile = new javax.swing.JMenuItem();
		this.SaveAs = new javax.swing.JMenuItem();
		this.jSeparator3 = new javax.swing.JPopupMenu.Separator();
		this.printDocument = new javax.swing.JMenuItem();
		this.jSeparator1 = new javax.swing.JPopupMenu.Separator();
		this.deleteFile = new javax.swing.JMenuItem();
		this.deleteCurrentProject = new javax.swing.JMenuItem();
		this.exitSystem = new javax.swing.JMenuItem();
		this.Module1 = new javax.swing.JMenu();
		this.GenerateMachineCode = new javax.swing.JMenuItem();
		this.ViewMachineCode = new javax.swing.JMenuItem();
		this.ViewSymbolTable = new javax.swing.JMenuItem();
		this.ViewCompilationOutput = new javax.swing.JMenuItem();
		this.Module2 = new javax.swing.JMenu();
		this.GenerateBasicBlocks = new javax.swing.JMenuItem();
		this.ViewBasicBlocks = new javax.swing.JMenuItem();
		this.Module3 = new javax.swing.JMenu();
		this.ViewVCGForm = new javax.swing.JMenuItem();
		this.GenerateVCGForm = new javax.swing.JMenuItem();
		this.Module4 = new javax.swing.JMenu();
		this.openOptimizationWindow = new javax.swing.JMenuItem();
		this.Module5 = new javax.swing.JMenu();
		this.openDDGForm = new javax.swing.JMenuItem();
		this.LanguageEditor = new javax.swing.JMenu();
		this.EditLexicalAnalyzer = new javax.swing.JMenuItem();
		this.EditSyntaxAnalyzer = new javax.swing.JMenuItem();
		this.UseFlex = new javax.swing.JMenuItem();
		this.UseBison = new javax.swing.JMenuItem();
		this.CreateCompiler = new javax.swing.JMenuItem();
		this.HelpMenu = new javax.swing.JMenu();
		this.OpenHelpMenu = new javax.swing.JMenuItem();
		this.OpenInfo = new javax.swing.JMenuItem();
		
		this.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		
		this.jPanel1.setAutoscrolls(true);
		this.jPanel1.setFocusCycleRoot(true);
		this.jPanel1.setFocusTraversalPolicyProvider(true);
		
		this.folderTree.setDragEnabled(true);
		this.folderTree.setEditable(true);
		this.folderTree.setMaximumSize(this.getMaximumSize());
		this.folderTree.addMouseListener(new java.awt.event.MouseAdapter()
		{
			@Override
			public void mouseClicked(java.awt.event.MouseEvent evt)
			{
				PascalPlusPlus.this.folderTreeMouseClicked(evt);
			}
		});
		this.folderTree.addFocusListener(new java.awt.event.FocusAdapter()
		{
			@Override
			public void focusGained(java.awt.event.FocusEvent evt)
			{
				PascalPlusPlus.this.folderTreeFocusGained(evt);
			}
		});
		this.jScrollPane2.setViewportView(this.folderTree);
		
		this.lineLabel.setText("Ln:");
		
		this.lineField.setEditable(false);
		
		this.jLabel2.setText("Col:");
		
		this.columnField.setEditable(false);
		
		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(this.jPanel1);
		this.jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(this.jLabel2)
										.addComponent(this.lineLabel))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
										.addComponent(this.lineField, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
										.addComponent(this.columnField))
								.addGap(60, 60, 60))
						.addComponent(this.jScrollPane2)
				);
		jPanel1Layout.setVerticalGroup(
				jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup()
								.addComponent(this.jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(this.lineLabel)
										.addComponent(this.lineField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
										.addComponent(this.jLabel2)
										.addComponent(this.columnField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
								.addContainerGap())
				);
		
		this.jTextPane1.addKeyListener(new java.awt.event.KeyAdapter()
		{
			@Override
			public void keyPressed(java.awt.event.KeyEvent evt)
			{
				PascalPlusPlus.this.jTextPane1KeyPressed(evt);
			}
		});
		this.jScrollPane3.setViewportView(this.jTextPane1);
		
		this.StatusField.setEditable(false);
		
		this.currentFileLabel.setText("Current File In Editor:");
		
		this.currentFileField.setEditable(false);
		this.currentFileField.setText("No File Selected");
		
		this.regBracketsLabel.setText("( ) Count:");
		
		this.regBracketsField.setEditable(false);
		
		this.roundBracketsLabel.setText("{ } Count:");
		
		this.roundBracketsField.setEditable(false);
		
		this.squareBracketsLabel.setText("[ ] Count:");
		
		this.squareBracketsField.setEditable(false);
		
		this.StatusLabel.setText("Status:");
		
		this.seacrhLabel.setText("Search:");
		
		this.searchButton.setText("Find");
		this.searchButton.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.searchButtonActionPerformed(evt);
			}
		});
		
		this.clearButton.setText("Clear");
		this.clearButton.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.clearButtonActionPerformed(evt);
			}
		});
		
		this.currentProjectLabel.setText("Current Project Selected:");
		
		this.currentProjectField.setEditable(false);
		
		this.nextButton.setText("Next");
		this.nextButton.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.nextButtonActionPerformed(evt);
			}
		});
		
		this.runningDirLabel.setText("Jar File Running Directory:");
		
		this.runningDirField.setEditable(false);
		this.runningDirField.setMaximumSize(new java.awt.Dimension(150, 2147483647));
		
		this.FileMenu.setText("File");
		
		this.createNewProject.setText("New Project");
		this.createNewProject.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.createNewProjectActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.createNewProject);
		
		this.newFile.setText("New File");
		this.newFile.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.newFileActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.newFile);
		
		this.openProject.setText("Open Project");
		this.openProject.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.openProjectActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.openProject);
		
		this.OpenFile.setText("Open File");
		this.OpenFile.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.OpenFileActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.OpenFile);
		
		this.CheckCode.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
		this.CheckCode.setText("Check Code");
		this.CheckCode.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.CheckCodeActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.CheckCode);
		this.FileMenu.add(this.jSeparator2);
		
		this.SaveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
		this.SaveFile.setText("Save");
		this.SaveFile.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.SaveFileActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.SaveFile);
		
		this.SaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
		this.SaveAs.setText("Save As");
		this.SaveAs.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.SaveAsActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.SaveAs);
		this.FileMenu.add(this.jSeparator3);
		
		this.printDocument.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
		this.printDocument.setText("Print");
		this.printDocument.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.printDocumentActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.printDocument);
		this.FileMenu.add(this.jSeparator1);
		
		this.deleteFile.setText("Delete Current File");
		this.deleteFile.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.deleteFileActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.deleteFile);
		
		this.deleteCurrentProject.setText("Delete Current Project");
		this.deleteCurrentProject.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.deleteCurrentProjectActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.deleteCurrentProject);
		
		this.exitSystem.setText("Exit");
		this.exitSystem.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.exitSystemActionPerformed(evt);
			}
		});
		this.FileMenu.add(this.exitSystem);
		
		this.jMenuBar1.add(this.FileMenu);
		
		this.Module1.setText("Module 1");
		
		this.GenerateMachineCode.setText("Generate Machine Code");
		this.GenerateMachineCode.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.GenerateMachineCodeActionPerformed(evt);
			}
		});
		this.Module1.add(this.GenerateMachineCode);
		
		this.ViewMachineCode.setText("View Machine Code");
		this.ViewMachineCode.setEnabled(false);
		this.ViewMachineCode.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.ViewMachineCodeActionPerformed(evt);
			}
		});
		this.Module1.add(this.ViewMachineCode);
		
		this.ViewSymbolTable.setText("View Symbol Table");
		this.ViewSymbolTable.setEnabled(false);
		this.ViewSymbolTable.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.ViewSymbolTableActionPerformed(evt);
			}
		});
		this.Module1.add(this.ViewSymbolTable);
		
		this.ViewCompilationOutput.setText("View Compilation Output");
		this.ViewCompilationOutput.setEnabled(false);
		this.ViewCompilationOutput.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.ViewCompilationOutputActionPerformed(evt);
			}
		});
		this.Module1.add(this.ViewCompilationOutput);
		
		this.jMenuBar1.add(this.Module1);
		
		this.Module2.setText("Module 2");
		
		this.GenerateBasicBlocks.setText("Generate Basic Blocks");
		this.GenerateBasicBlocks.setEnabled(false);
		this.GenerateBasicBlocks.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.GenerateBasicBlocksActionPerformed(evt);
			}
		});
		this.Module2.add(this.GenerateBasicBlocks);
		
		this.ViewBasicBlocks.setText("View Basic Block");
		this.ViewBasicBlocks.setEnabled(false);
		this.ViewBasicBlocks.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.ViewBasicBlocksActionPerformed(evt);
			}
		});
		this.Module2.add(this.ViewBasicBlocks);
		
		this.jMenuBar1.add(this.Module2);
		
		this.Module3.setText("Module 3");
		
		this.ViewVCGForm.setText("View VCG Form");
		this.ViewVCGForm.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.ViewVCGFormActionPerformed(evt);
			}
		});
		this.Module3.add(this.ViewVCGForm);
		
		this.GenerateVCGForm.setText("Generate VCG Form");
		this.GenerateVCGForm.setEnabled(false);
		this.GenerateVCGForm.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.GenerateVCGFormActionPerformed(evt);
			}
		});
		this.Module3.add(this.GenerateVCGForm);
		
		this.jMenuBar1.add(this.Module3);
		
		this.Module4.setText("Optimization");
		
		this.openOptimizationWindow.setText("Open Optimization Menu");
		this.openOptimizationWindow.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.openOptimizationWindowActionPerformed(evt);
			}
		});
		this.Module4.add(this.openOptimizationWindow);
		
		this.jMenuBar1.add(this.Module4);
		
		this.Module5.setText("DDG");
		
		this.openDDGForm.setText("Open DDG Form");
		this.openDDGForm.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.openDDGFormActionPerformed(evt);
			}
		});
		this.Module5.add(this.openDDGForm);
		
		this.jMenuBar1.add(this.Module5);
		
		this.LanguageEditor.setText("Language Editor");
		
		this.EditLexicalAnalyzer.setText("Edit Lexical Analyzer File");
		this.EditLexicalAnalyzer.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.EditLexicalAnalyzerActionPerformed(evt);
			}
		});
		this.LanguageEditor.add(this.EditLexicalAnalyzer);
		
		this.EditSyntaxAnalyzer.setText("Edit Syntax Analyzer File");
		this.EditSyntaxAnalyzer.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.EditSyntaxAnalyzerActionPerformed(evt);
			}
		});
		this.LanguageEditor.add(this.EditSyntaxAnalyzer);
		
		this.UseFlex.setText("Use Flex Tool (For Creating Lexical Analyzer)");
		this.UseFlex.setEnabled(false);
		this.UseFlex.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.UseFlexActionPerformed(evt);
			}
		});
		this.LanguageEditor.add(this.UseFlex);
		
		this.UseBison.setText("Use BISON Tool (For Creating Parser)");
		this.UseBison.setEnabled(false);
		this.UseBison.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.UseBisonActionPerformed(evt);
			}
		});
		this.LanguageEditor.add(this.UseBison);
		
		this.CreateCompiler.setText("Create Compiler");
		this.CreateCompiler.setEnabled(false);
		this.CreateCompiler.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.CreateCompilerActionPerformed(evt);
			}
		});
		this.LanguageEditor.add(this.CreateCompiler);
		
		this.jMenuBar1.add(this.LanguageEditor);
		
		this.HelpMenu.setText("Help");
		
		this.OpenHelpMenu.setText("Open Help Menu");
		this.OpenHelpMenu.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.OpenHelpMenuActionPerformed(evt);
			}
		});
		this.HelpMenu.add(this.OpenHelpMenu);
		
		this.OpenInfo.setText("About");
		this.OpenInfo.addActionListener(new java.awt.event.ActionListener()
		{
			@Override
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				PascalPlusPlus.this.OpenInfoActionPerformed(evt);
			}
		});
		this.HelpMenu.add(this.OpenInfo);
		
		this.jMenuBar1.add(this.HelpMenu);
		
		this.setJMenuBar(this.jMenuBar1);
		
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this.getContentPane());
		this.getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addContainerGap()
								.addComponent(this.jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(this.StatusLabel)
														.addComponent(this.seacrhLabel))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
														.addComponent(this.searchField)
														.addComponent(this.StatusField, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
														.addGroup(layout.createSequentialGroup()
																.addComponent(this.searchButton)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.nextButton)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.clearButton)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.runningDirLabel)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.runningDirField, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
																.addComponent(this.currentFileLabel))
														.addGroup(layout.createSequentialGroup()
																.addComponent(this.regBracketsLabel)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.regBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(this.roundBracketsLabel)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.roundBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(this.squareBracketsLabel)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																.addComponent(this.squareBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
																.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
																.addComponent(this.currentProjectLabel)))
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(this.currentProjectField)
														.addComponent(this.currentFileField, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE)))
										.addComponent(this.jScrollPane3))
								.addContainerGap())
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(layout.createSequentialGroup()
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addGroup(layout.createSequentialGroup()
												.addComponent(this.jScrollPane3)
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(this.seacrhLabel)
														.addComponent(this.searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.searchButton)
														.addComponent(this.clearButton)
														.addComponent(this.currentFileLabel)
														.addComponent(this.currentFileField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.nextButton)
														.addComponent(this.runningDirLabel)
														.addComponent(this.runningDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(9, 9, 9)
												.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
														.addComponent(this.StatusLabel)
														.addComponent(this.StatusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.regBracketsLabel)
														.addComponent(this.regBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.roundBracketsLabel)
														.addComponent(this.roundBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.squareBracketsLabel)
														.addComponent(this.squareBracketsField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
														.addComponent(this.currentProjectLabel)
														.addComponent(this.currentProjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGroup(layout.createSequentialGroup()
												.addComponent(this.jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addGap(0, 109, Short.MAX_VALUE)))
								.addContainerGap())
				);
		
		this.pack();
	}// </editor-fold>//GEN-END:initComponents
	
	private void newFileActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_newFileActionPerformed
		// TODO add your handling code here:
		if (!this.jTextPane1.getText().equals(""))
		{
			JOptionPane.showMessageDialog(this.frame, "Please Save your current file before open new project");
			try
			{
				this.basicClass.SaveBeforeOpenFile(this.jTextPane1, this.frame, this.currentFileField);
			}
			catch (IOException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
			}
			if (this.currentFileField.getText().equals("No File Selected"))
			{
				this.basicClass.CreateNewFile(this.jTextPane1, this.currentFileField);
				this.currentFilePath = "";
			}
		}
		else
		{
			this.basicClass.CreateNewFile(this.jTextPane1, this.currentFileField);
			this.currentFilePath = "";
		}
	}//GEN-LAST:event_newFileActionPerformed
	
	private void GenerateMachineCodeActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_GenerateMachineCodeActionPerformed
		int returnValue;
		File checkFile;
		boolean errorFlag = false;
		String showErrorMessage = "Please manually delete the next files from the project folder:\n";
		checkFile = new File(this.currentProjectField.getText() + "\\Error_Log.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "Error_Log.txt\n";
			errorFlag = true;
		}
		checkFile = new File(this.currentProjectField.getText() + "\\out1.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "out1.txt\n";
			errorFlag = true;
		}
		checkFile = new File(this.currentProjectField.getText() + "\\symbol " + "table.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "symbol " + "table.txt\n";
			errorFlag = true;
		}
		checkFile = new File(this.currentProjectField.getText() + "\\symbol_table.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "symbol_table.txt\n";
			errorFlag = true;
		}
		checkFile = new File(this.currentProjectField.getText() + "\\tree.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "tree.txt\n";
			errorFlag = true;
		}
		checkFile = new File(this.currentProjectField.getText() + "\\error_type.txt");
		returnValue = this.basicClass.checkDeleteFile(checkFile);
		if (returnValue == 0)
		{
			showErrorMessage = showErrorMessage + "error_type.txt";
			errorFlag = true;
		}
		if (errorFlag)
		{
			JOptionPane.showMessageDialog(this.frame, showErrorMessage, "Error", JOptionPane.ERROR_MESSAGE);
		}
		else
		{
			try
			{
				this.module1.GenerateMachineCode(this.frame, this.currentProjectField, this.currentFileField, this.jTextPane1, this.basicClass, this.ViewMachineCode, this.ViewSymbolTable);
			}
			catch (IOException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		File checkOutput;
		checkOutput = new File(this.currentProjectField.getText() + "\\out1.txt");
		try
		{
			Thread.sleep(1000);
		}
		catch (InterruptedException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		if (!checkOutput.exists())
		{
			JOptionPane.showMessageDialog(this.frame, "Compilation failed", "Error", JOptionPane.ERROR_MESSAGE);
			try
			{
				String fromFile = this.basicClass.readFromFile(this.currentProjectField.getText() + "\\outputParser.txt");
				this.module1.ViewCompilationOutput(fromFile);
			}
			catch (FileNotFoundException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
			}
			catch (IOException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
		else
		{
			JOptionPane.showMessageDialog(this.frame, "Compilation succeed", "Compilation Message", JOptionPane.INFORMATION_MESSAGE);
			this.ViewMachineCode.setEnabled(true);
			checkOutput = new File(this.currentProjectField.getText() + "\\symbol " + "table.txt");
			if (checkOutput.exists())
			{
				this.ViewSymbolTable.setEnabled(true);
			}
			this.GenerateBasicBlocks.setEnabled(true);
		}
		this.ViewCompilationOutput.setEnabled(true);
	}//GEN-LAST:event_GenerateMachineCodeActionPerformed
	
	private void GenerateBasicBlocksActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_GenerateBasicBlocksActionPerformed
		// TODO add your handling code here:
		this.module2.GenerateBasicBlocks(this.currentProjectField, this.frame);
		try
		{
			Thread.sleep(1000);
		}
		catch (InterruptedException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		File checkFile = new File(this.currentProjectField.getText() + "\\out2.ir");
		if (checkFile.exists())
		{
			this.ViewBasicBlocks.setEnabled(true);
		}
		else
		{
			JOptionPane.showMessageDialog(this.frame, "Could not generate basic blocks file, Please check log file at:\n"
					+ this.currentProjectField.getText() + "\\Log_Module2.txt", "Error", JOptionPane.INFORMATION_MESSAGE);
		}
		checkFile = new File(this.currentProjectField.getText() + "\\vcg_out2.vcg");
		if (checkFile.exists())
		{
			this.GenerateVCGForm.setEnabled(true);
		}
		else
		{
			JOptionPane.showMessageDialog(this.frame, "Could not generate VCG file, Please check log file at:\n"
					+ this.currentProjectField.getText() + "\\Log_Module2.txt", "Error", JOptionPane.INFORMATION_MESSAGE);
		}
	}//GEN-LAST:event_GenerateBasicBlocksActionPerformed
	
	private void ViewBasicBlocksActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_ViewBasicBlocksActionPerformed
		try
		{
			String fromFile = this.basicClass.readFromFile(this.currentProjectField.getText() + "\\out2.ir");
			this.module2.ViewBasicBlocks(fromFile);
		}
		catch (FileNotFoundException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		catch (IOException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_ViewBasicBlocksActionPerformed
	
	private void GenerateVCGFormActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_GenerateVCGFormActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		FileNameExtensionFilter filter = new FileNameExtensionFilter("VCG Files", "vcg");
		fileChooser.setFileFilter(filter);
		File dirPath = new File(this.currentProjectField.getText());
		fileChooser.setCurrentDirectory(dirPath);
		int returnVal = fileChooser.showOpenDialog(this.frame);
		if (returnVal == JFileChooser.APPROVE_OPTION)
		{
			File selected = fileChooser.getSelectedFile();
			String fileName = selected.getName();
			this.module3.GenerateVCGForm(fileName, this.currentProjectField);
		}
	}//GEN-LAST:event_GenerateVCGFormActionPerformed
	
	private void openOptimizationWindowActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_openOptimizationWindowActionPerformed
		this.optimizationEditor.OpenOptimizationWindow();
	}//GEN-LAST:event_openOptimizationWindowActionPerformed
	
	private void openDDGFormActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_openDDGFormActionPerformed
		this.ddg.OpenDDGForm(this.currentProjectField.getText(), this.frame);
	}//GEN-LAST:event_openDDGFormActionPerformed
	
	private void exitSystemActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_exitSystemActionPerformed
		// TODO add your handling code here:
		int selection = JOptionPane.showConfirmDialog(this.frame, "Do you really want to exit the program?\n"
				+ "All unsaved data will be lost", "Exit", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
		if (selection == 0)
		{
			this.dispose();
		}
	}//GEN-LAST:event_exitSystemActionPerformed
	
	private void ViewVCGFormActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_ViewVCGFormActionPerformed
		// TODO add your handling code here:
		this.module3.ViewVCGForm(this.frame);
	}//GEN-LAST:event_ViewVCGFormActionPerformed
	
	private void EditLexicalAnalyzerActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_EditLexicalAnalyzerActionPerformed
		// TODO add your handling code here:
		this.languageEditor.EditFlexFile(this.frame, this.currentProjectField);
	}//GEN-LAST:event_EditLexicalAnalyzerActionPerformed
	
	private void UseFlexActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_UseFlexActionPerformed
		this.languageEditor.UseFlex(this.frame, this.currentProjectField, this.basicClass);
		this.languageEditor.ClearLanguage();
		this.languageEditor.ReadLanguage(this.currentProjectField.getText());
	}//GEN-LAST:event_UseFlexActionPerformed
	
	private void UseBisonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_UseBisonActionPerformed
		this.languageEditor.UseBison(this.frame, this.currentProjectField, this.basicClass);
	}//GEN-LAST:event_UseBisonActionPerformed
	
	private void OpenHelpMenuActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_OpenHelpMenuActionPerformed
		// SearchTopic st = new SearchTopic(this.path);
		this.helpForm.setVisible(true);
		
	}//GEN-LAST:event_OpenHelpMenuActionPerformed
	
	private void OpenInfoActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_OpenInfoActionPerformed
		InfoForm infoForm = new InfoForm();
		infoForm.setVisible(true);
	}//GEN-LAST:event_OpenInfoActionPerformed
	
	private void ViewMachineCodeActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_ViewMachineCodeActionPerformed
		try
		{
			String fromFile = this.basicClass.readFromFile(this.currentProjectField.getText() + "\\out1.txt");
			this.module1.ViewMachineCode(fromFile);
		}
		catch (FileNotFoundException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		catch (IOException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_ViewMachineCodeActionPerformed
	
	private void ViewSymbolTableActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_ViewSymbolTableActionPerformed
		// TODO add your handling code here:
		try
		{
			String fromFile = this.basicClass.readFromFile(this.currentProjectField.getText() + "\\symbol_table.txt");
			this.module1.ViewSymbolTable(fromFile);
		}
		catch (FileNotFoundException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		catch (IOException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_ViewSymbolTableActionPerformed
	
	private void OpenFileActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_OpenFileActionPerformed
		// TODO add your handling code here:
		this.basicClass.OpenFile(this.jTextPane1, this.frame, this.currentFileField);
		this.currentFilePath = this.currentFileField.getText();
		this.textEditor.CheckTextOnTheFly(this.jTextPane1, this.languageEditor);
	}//GEN-LAST:event_OpenFileActionPerformed
	
	private void jTextPane1KeyPressed(java.awt.event.KeyEvent evt)
	{//GEN-FIRST:event_jTextPane1KeyPressed
		int caretPos = this.jTextPane1.getCaretPosition();
		int rowNum = (caretPos == 0) ? 1 : 0;
		for ( int offset = caretPos ; offset > 0 ; )
		{
			try
			{
				offset = Utilities.getRowStart(this.jTextPane1, offset) - 1;
			}
			catch (BadLocationException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
			}
			rowNum++;
		}
		this.lineField.setText("" + rowNum);
		try
		{
			int offset = Utilities.getRowStart(this.jTextPane1, caretPos);
			int colNum = caretPos - offset + 1;
			this.columnField.setText("" + colNum);
		}
		catch (BadLocationException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		
		if (this.jTextPane1.getSelectedText() != null)
		{
			this.jTextPane1.replaceSelection("");
		}
		this.textEditor.CheckTextOnTheFly(this.jTextPane1, this.languageEditor);
	}//GEN-LAST:event_jTextPane1KeyPressed
	
	private void SaveFileActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_SaveFileActionPerformed
		// TODO add your handling code here:
		if (this.currentFilePath.equals(""))
		{
			if (this.jTextPane1.getText().equals(""))
			{
				JOptionPane.showMessageDialog(this.frame, "Cannot save an empty project");
			}
			else
			{
				try
				{
					this.basicClass.SaveFile(this.jTextPane1, this.frame, this.currentFileField);
					this.currentFilePath = this.currentFileField.getText();
				}
				catch (IOException ex)
				{
					Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
					JOptionPane.showMessageDialog(this.frame, "Cannot save file", "Could not Save File ", JOptionPane.ERROR_MESSAGE);
				}
			}
		}
		else
		{
			try
			{
				this.basicClass.SaveFileNoFileChooser(this.jTextPane1, this.frame, this.currentFilePath);
			}
			catch (IOException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
				JOptionPane.showMessageDialog(this.frame, "Cannot save file", "Could not Save File ", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_SaveFileActionPerformed
	
	private void SaveAsActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_SaveAsActionPerformed
		// TODO add your handling code here:
		if (this.jTextPane1.getText().equals(""))
		{
			JOptionPane.showMessageDialog(this.frame, "Cannot save an empty project");
		}
		else
		{
			try
			{
				this.basicClass.SaveFile(this.jTextPane1, this.frame, this.currentFileField);
				this.currentFilePath = this.currentFileField.getText();
			}
			catch (IOException ex)
			{
				Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
				JOptionPane.showMessageDialog(this.frame, "Cannot save file", "Could not Save File ", JOptionPane.ERROR_MESSAGE);
			}
		}
	}//GEN-LAST:event_SaveAsActionPerformed
	
	private void CheckCodeActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_CheckCodeActionPerformed
		// TODO add your handling code here:
		boolean errorFlag = false;
		this.textEditor.CheckCode(this.jTextPane1, this.languageEditor);
		if (this.textEditor.checkBracketsResult("()").equals("OK"))
		{
			this.regBracketsField.setForeground(Color.green);
		}
		else
		{
			this.regBracketsField.setForeground(Color.red);
			errorFlag = true;
		}
		
		this.regBracketsField.setText(this.textEditor.checkBracketsResult("()"));
		
		if (this.textEditor.checkBracketsResult("{}").equals("OK"))
		{
			this.roundBracketsField.setForeground(Color.green);
		}
		else
		{
			this.roundBracketsField.setForeground(Color.red);
			errorFlag = true;
		}
		
		this.roundBracketsField.setText(this.textEditor.checkBracketsResult("{}"));
		
		if (this.textEditor.checkBracketsResult("[]").equals("OK"))
		{
			this.squareBracketsField.setForeground(Color.green);
		}
		else
		{
			this.squareBracketsField.setForeground(Color.red);
			errorFlag = true;
		}
		
		this.squareBracketsField.setText(this.textEditor.checkBracketsResult("[]"));
		
		if (errorFlag)
		{
			this.StatusField.setForeground(Color.red);
			this.StatusField.setText("Error In Code");
		}
		else
		{
			this.StatusField.setForeground(Color.green);
			this.StatusField.setText("Code Is OK");
		}
	}//GEN-LAST:event_CheckCodeActionPerformed
	
	private void EditSyntaxAnalyzerActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_EditSyntaxAnalyzerActionPerformed
		// TODO add your handling code here:
		this.languageEditor.EditBisonFile(this.frame, this.currentProjectField);
	}//GEN-LAST:event_EditSyntaxAnalyzerActionPerformed
	
	private void searchButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_searchButtonActionPerformed
		// TODO add your handling code here:
		String searchString = this.searchField.getText();
		this.textEditor.search(this.jTextPane1, this.searchField, searchString);
	}//GEN-LAST:event_searchButtonActionPerformed
	
	private void clearButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_clearButtonActionPerformed
		// TODO add your handling code here:
		this.textEditor.clearSearch(this.jTextPane1, this.searchField);
		this.searchIndex = 0;
	}//GEN-LAST:event_clearButtonActionPerformed
	
	private void createNewProjectActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_createNewProjectActionPerformed
		// TODO add your handling code here:
		this.basicClass.createProject(this.currentProjectField, this.frame);
		this.GenerateMachineCode.setEnabled(false);
		this.ViewMachineCode.setEnabled(false);
		this.ViewSymbolTable.setEnabled(false);
		this.ViewCompilationOutput.setEnabled(false);
		this.GenerateBasicBlocks.setEnabled(false);
		this.ViewBasicBlocks.setEnabled(false);
		this.GenerateVCGForm.setEnabled(false);
		this.UseFlex.setEnabled(true);
		this.UseBison.setEnabled(true);
		this.CreateCompiler.setEnabled(true);
		this.languageEditor.ClearLanguage();
	}//GEN-LAST:event_createNewProjectActionPerformed
	
	private void openProjectActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_openProjectActionPerformed
		// TODO add your handling code here:
		this.basicClass.openProject(this.currentProjectField, this.frame, this.GenerateMachineCode);
		if (!this.currentProjectField.getText().equals(this.path + "\\projects\\Pascal++"))
		{
			this.UseFlex.setEnabled(true);
			this.UseBison.setEnabled(true);
			this.CreateCompiler.setEnabled(true);
			File checkLanguageFile = new File(this.currentProjectField.getText() + "\\languageFile.txt");
			this.languageEditor.ClearLanguage();
			if (checkLanguageFile.exists())
			{
				this.languageEditor.ReadLanguage(this.currentProjectField.getText());
			}
		}
		else
		{
			this.UseFlex.setEnabled(false);
			this.UseBison.setEnabled(false);
			this.CreateCompiler.setEnabled(false);
			this.languageEditor.ClearLanguage();
			this.languageEditor.ReadLanguage(this.path + "\\projects\\Pascal++");
		}
		String projectPath = this.currentProjectField.getText();
		int lastIndex = projectPath.lastIndexOf("\\");
		String projectName = projectPath.substring(lastIndex + 1, projectPath.length());
		File checkFile = new File(this.currentProjectField.getText() + "\\" + projectName + ".exe");
		if (checkFile.exists())
		{
			this.GenerateMachineCode.setEnabled(true);
		}
		else
		{
			this.GenerateMachineCode.setEnabled(false);
		}
		this.ViewMachineCode.setEnabled(false);
		this.ViewSymbolTable.setEnabled(false);
		this.GenerateBasicBlocks.setEnabled(false);
		this.ViewCompilationOutput.setEnabled(false);
		this.ViewBasicBlocks.setEnabled(false);
		this.GenerateVCGForm.setEnabled(false);
	}//GEN-LAST:event_openProjectActionPerformed
	
	private void deleteCurrentProjectActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_deleteCurrentProjectActionPerformed
		// TODO add your handling code here:
		if (!this.currentProjectField.getText().equals(this.path + "\\projects\\Pascal++"))
		{
			int selection = JOptionPane.showConfirmDialog(this.frame, "Do you really want to delete current project?", "Delete Project", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE);
			if (selection == 0)
			{
				this.basicClass.deleteDir(this.currentProjectField, this.frame);
				this.currentProjectField.setText(this.path + "\\projects\\Pascal++");
				this.UseFlex.setEnabled(false);
				this.UseBison.setEnabled(false);
				this.CreateCompiler.setEnabled(false);
			}
			
		}
		else
		{
			JOptionPane.showMessageDialog(this.frame, "Cannot delete the default project", "Cannot delete project", JOptionPane.WARNING_MESSAGE);
		}
	}//GEN-LAST:event_deleteCurrentProjectActionPerformed
	
	private void CreateCompilerActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_CreateCompilerActionPerformed
		boolean openMachineCode = this.languageEditor.CreateCompiler(this.frame, this.currentProjectField, this.basicClass);
		try
		{
			Thread.sleep(1000);
		}
		catch (InterruptedException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		if (openMachineCode)
		{
			this.GenerateMachineCode.setEnabled(true);
		}
	}//GEN-LAST:event_CreateCompilerActionPerformed
	
	private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_nextButtonActionPerformed
		// TODO add your handling code here:       
		String searchString = this.searchField.getText();
		if (searchString.length() > 0)
		{
			if (this.searchIndex < this.jTextPane1.getText().length())
			{
				this.searchIndex = this.textEditor.searchNext(this.jTextPane1, this.searchField, searchString, this.searchIndex);
			}
			else
			{
				this.searchIndex = 0;
				this.searchIndex = this.textEditor.searchNext(this.jTextPane1, this.searchField, searchString, this.searchIndex);
			}
		}
	}//GEN-LAST:event_nextButtonActionPerformed
	
	private void printDocumentActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_printDocumentActionPerformed
		// TODO add your handling code here:
		PrinterJob pj = PrinterJob.getPrinterJob();
		if (pj.printDialog())
		{
			try
			{
				pj.print();
			}
			catch (PrinterException exc)
			{
				JOptionPane.showMessageDialog(this.frame, "Cannot print the document!", "Printer Error", ImageObserver.ERROR);
			}
		}
	}//GEN-LAST:event_printDocumentActionPerformed
	
	private void ViewCompilationOutputActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_ViewCompilationOutputActionPerformed
		// TODO add your handling code here:
		try
		{
			String fromFile = this.basicClass.readFromFile(this.currentProjectField.getText() + "\\outputParser.txt");
			this.module1.ViewCompilationOutput(fromFile);
		}
		catch (FileNotFoundException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
		catch (IOException ex)
		{
			Logger.getLogger(PascalPlusPlus.class.getName()).log(Level.SEVERE, null, ex);
		}
	}//GEN-LAST:event_ViewCompilationOutputActionPerformed
	
	private void deleteFileActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_deleteFileActionPerformed
		if (this.currentFileField.getText().equals("No File Selected"))
		{
			JOptionPane.showMessageDialog(this.frame, "No open files in the IDE", "No Open File", JOptionPane.INFORMATION_MESSAGE);
		}
		else
		{
			String fileDeleted = this.basicClass.deleteFile(this.frame, this.currentFileField);
			switch (fileDeleted)
			{
				case "NotDeleted":
					JOptionPane.showMessageDialog(this.frame, "Cannot delete:\n" + this.currentFilePath, "Cannot Delete Selected File", ImageObserver.ERROR);
					break;
				case "NotExist":
					JOptionPane.showMessageDialog(this.frame, "Can't find:\n" + this.currentFilePath, "Cannot Find Selected File", ImageObserver.ERROR);
					break;
				case "Deleted":
					JOptionPane.showMessageDialog(this.frame, "Deleted Successfully:\n" + this.currentFilePath, "Cannot Find Selected File", JOptionPane.INFORMATION_MESSAGE);
					this.jTextPane1.setText("");
					this.currentFileField.setText("No File Selected");
					this.currentFilePath = "";
					break;
			}
		}
	}//GEN-LAST:event_deleteFileActionPerformed
	
	private void folderTreeFocusGained(java.awt.event.FocusEvent evt)
	{//GEN-FIRST:event_folderTreeFocusGained
		this.CreateTree();
	}//GEN-LAST:event_folderTreeFocusGained
	
	private void folderTreeMouseClicked(java.awt.event.MouseEvent evt)
	{//GEN-FIRST:event_folderTreeMouseClicked
		if (evt.getClickCount() == 2)
		{
			String selectionPath = this.folderTree.getSelectionPath().getLastPathComponent().toString();
			File file = new File(selectionPath);
			if (file.isFile() && selectionPath.substring(selectionPath.length() - 2, selectionPath.length()).equals(".p"))
			{
				this.basicClass.OpenFileTree(this.jTextPane1, this.frame, this.currentFileField, selectionPath);
				this.textEditor.CheckTextOnTheFly(this.jTextPane1, this.languageEditor);
				this.currentFilePath = this.currentFileField.getText();
			}
			else
			{
				if (file.isFile())
				{
					JOptionPane.showMessageDialog(this.frame, "Please choose *.p file!", "Cannot Open Selected File", JOptionPane.INFORMATION_MESSAGE);
				}
			}
		}
		this.textEditor.CheckCode(this.jTextPane1, this.languageEditor);
	}//GEN-LAST:event_folderTreeMouseClicked
	
	private String GetExecutionPath()
	{
		File f = new File(System.getProperty("java.class.path"));
		File dir = f.getAbsoluteFile().getParentFile();
		String pathToJar = dir.toString();
		return pathToJar;
	}
	
	private void CreateTree()
	{
		this.folderTree.setCellRenderer(new MyTreeCellRenderer());
		this.folderTree.setDragEnabled(false);
		File fileRoot = new File(this.path);
		DefaultMutableTreeNode root = new DefaultMutableTreeNode(fileRoot);
		DefaultMutableTreeNode dm = this.addNodes(root, fileRoot);
		DefaultTreeModel model = new DefaultTreeModel(dm);
		this.folderTree.setEditable(false);
		this.folderTree.setModel(model);
	}
	
	DefaultMutableTreeNode addNodes(DefaultMutableTreeNode curTop, File dir)
	{
		DefaultMutableTreeNode curDir = new DefaultMutableTreeNode(dir);
		if (curTop != null)
		{ // should only be null at root
			curTop.add(curDir);
		}
		File[] tmp = dir.listFiles();
		Vector<File> ol = new Vector<File>();
		ol.addAll(Arrays.asList(tmp));
		Collections.sort(ol, new Comparator<File>()
		{
			@Override
			public int compare(File o1, File o2)
			{
				
				int result = o1.getName().compareTo(o2.getName());
				
				if (o1.isDirectory() && o2.isFile())
				{
					result = -1;
				}
				else if (o2.isDirectory() && o1.isFile())
				{
					result = 1;
				}
				
				return result;
			}
		});
		// Pass two: for files.
		for ( int fnum = 0 ; fnum < ol.size() ; fnum++ )
		{
			File file = ol.elementAt(fnum);
			DefaultMutableTreeNode node = new DefaultMutableTreeNode(file);
			if (file.isDirectory())
			{
				this.addNodes(node, file);
			}
			curDir.add(node);
		}
		return curDir;
	}
	
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[])
	{
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try
		{
			for ( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() )
			{
				if ("Nimbus".equals(info.getName()))
				{
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
					
				}
			}
		}
		catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex)
		{
			java.util.logging.Logger.getLogger(PascalPlusPlus.class
					.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>  
		/* Create and display the form */
		
		java.awt.EventQueue.invokeLater(new Runnable()
		{
			@Override
			public void run()
			{
				new PascalPlusPlus().setVisible(true);
			}
		});
	}
	
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JMenuItem CheckCode;
	private javax.swing.JMenuItem CreateCompiler;
	private javax.swing.JMenuItem EditLexicalAnalyzer;
	private javax.swing.JMenuItem EditSyntaxAnalyzer;
	private javax.swing.JMenu FileMenu;
	private javax.swing.JMenuItem GenerateBasicBlocks;
	private javax.swing.JMenuItem GenerateMachineCode;
	private javax.swing.JMenuItem GenerateVCGForm;
	private javax.swing.JMenu HelpMenu;
	private javax.swing.JMenu LanguageEditor;
	private javax.swing.JMenu Module1;
	private javax.swing.JMenu Module2;
	private javax.swing.JMenu Module3;
	private javax.swing.JMenu Module4;
	private javax.swing.JMenu Module5;
	private javax.swing.JMenuItem OpenFile;
	private javax.swing.JMenuItem OpenHelpMenu;
	private javax.swing.JMenuItem OpenInfo;
	private javax.swing.JMenuItem SaveAs;
	private javax.swing.JMenuItem SaveFile;
	private javax.swing.JTextField StatusField;
	private javax.swing.JLabel StatusLabel;
	private javax.swing.JMenuItem UseBison;
	private javax.swing.JMenuItem UseFlex;
	private javax.swing.JMenuItem ViewBasicBlocks;
	private javax.swing.JMenuItem ViewCompilationOutput;
	private javax.swing.JMenuItem ViewMachineCode;
	private javax.swing.JMenuItem ViewSymbolTable;
	private javax.swing.JMenuItem ViewVCGForm;
	private javax.swing.JButton clearButton;
	private javax.swing.JTextField columnField;
	private javax.swing.JMenuItem createNewProject;
	private javax.swing.JTextField currentFileField;
	private javax.swing.JLabel currentFileLabel;
	private javax.swing.JTextField currentProjectField;
	private javax.swing.JLabel currentProjectLabel;
	private javax.swing.JMenuItem deleteCurrentProject;
	private javax.swing.JMenuItem deleteFile;
	private javax.swing.JMenuItem exitSystem;
	private javax.swing.JTree folderTree;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JScrollPane jScrollPane3;
	private javax.swing.JPopupMenu.Separator jSeparator1;
	private javax.swing.JPopupMenu.Separator jSeparator2;
	private javax.swing.JPopupMenu.Separator jSeparator3;
	private javax.swing.JTextPane jTextPane1;
	private javax.swing.JTextField lineField;
	private javax.swing.JLabel lineLabel;
	private javax.swing.JMenuItem newFile;
	private javax.swing.JButton nextButton;
	private javax.swing.JMenuItem openDDGForm;
	private javax.swing.JMenuItem openOptimizationWindow;
	private javax.swing.JMenuItem openProject;
	private javax.swing.JMenuItem printDocument;
	private javax.swing.JTextField regBracketsField;
	private javax.swing.JLabel regBracketsLabel;
	private javax.swing.JTextField roundBracketsField;
	private javax.swing.JLabel roundBracketsLabel;
	private javax.swing.JTextField runningDirField;
	private javax.swing.JLabel runningDirLabel;
	private javax.swing.JLabel seacrhLabel;
	private javax.swing.JButton searchButton;
	private javax.swing.JTextField searchField;
	private javax.swing.JTextField squareBracketsField;
	private javax.swing.JLabel squareBracketsLabel;
	// End of variables declaration//GEN-END:variables
}
